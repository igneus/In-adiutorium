# coding: utf-8
require 'aruba/rspec'

# integration tests for typographus
describe 'typographus.rb', type: :aruba do
  let(:typographus) { File.expand_path '../../typographus.rb', __dir__ }
  let(:cmd) { "ruby #{typographus} file.tytex" }

  it 'produces output file' do
    write_file 'file.tytex', ''
    run_command_and_stop(cmd)

    expect('file.lytex').to have_file_content file_content_including('%% Generated by typographus.rb from file.tytex')
  end

  describe 'expanding macros' do
    describe '\simpleScore' do
      it 'full FIAL as argument' do
        write_file 'file.tytex', '\simpleScore{music.ly#id}'
        write_file 'music.ly', <<~'EOS'
        \score {
          \relative c' { a b c }
          \header { id = "id" }
        }
        EOS
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('\lilypondfile{typographus_tmp/file_tytex/music_id.ly}')
        expect('typographus_tmp/file_tytex/music_id.ly').to be_an_existing_file
      end

      it '\setChantSource + only ID as argument' do
        write_file 'file.tytex', '\setChantSource{music.ly} \simpleScore{#id}'
        write_file 'music.ly', <<~'EOS'
        \score {
          \relative c' { a b c }
          \header { id = "id" }
        }
        EOS
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('\lilypondfile{typographus_tmp/file_tytex/music_id.ly}')
        expect('typographus_tmp/file_tytex/music_id.ly').to be_an_existing_file
      end
    end

    describe '\psalm' do
      it 'produces and includes a psalm file' do
        write_file 'file.tytex', '\psalm{Žalm 117}{VIII.G}'
        write_file 'zalm117.zalm', ''
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('\input{typographus_tmp/file_tytex/zalm117_00000.tex}')
        expect('typographus_tmp/file_tytex/zalm117_00000.tex').to be_an_existing_file
      end

      describe 'appending doxology' do
        it 'by default none' do
          write_file 'file.tytex', '\psalm{Žalm 117}{VIII.G}'
          write_file 'zalm117.zalm', ''
          run_command_and_stop(cmd)

          # no doxology added (nothing between psalm title and end of psalm)
          expect('typographus_tmp/file_tytex/zalm117_00000.tex')
            .to have_file_content file_content_including("\\titulusPsalmi{}\n\n\n\\end{psalmus}")
        end

        it 'full doxology' do
          write_file 'file.tytex', '\setConfig{config.yml} \psalm{Žalm 117}{VIII.G}'
          write_file 'config.yml', 'typographus: {doxology: full}'

          write_file 'zalm117.zalm', "Psalm title\n\nThe psalm *\nends here."
          write_file 'doxologie.zalm', "Gloria *\nsaeculorum. Amen."

          run_command_and_stop(cmd)

          # content of doxologie.zalm added, separated by a strophe mark
          expect('typographus_tmp/file_tytex/zalm117_00000.tex')
            .to have_file_content file_content_including("ends here.\\psalmStrophe\n\nGloria")
        end

        it 'shortcut' do
          write_file 'file.tytex', '\setConfig{config.yml} \psalm{Žalm 117}{VIII.G}'
          write_file 'config.yml', 'typographus: {doxology: shortcut}'

          write_file 'zalm117.zalm', "Psalm title\n\nThe psalm *\nends here."

          run_command_and_stop(cmd)

          # shortcut added at the end of the psalm
          expect('typographus_tmp/file_tytex/zalm117_00000.tex')
            .to have_file_content file_content_including("ends here.\n\\nopagebreak Sláva Otci.\n\\end{psalmus}")
        end
      end
    end
  end
end
