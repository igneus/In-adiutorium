# coding: utf-8
require 'aruba/rspec'

# integration tests for typographus
describe 'typographus.rb', type: :aruba do
  let(:typographus) { File.expand_path '../../typographus.rb', __dir__ }
  let(:cmd) { "ruby #{typographus} file.tytex" }

  it 'produces output file' do
    write_file 'file.tytex', ''
    run_command_and_stop(cmd)

    expect('file.lytex').to have_file_content file_content_including('%% Generated by typographus.rb from file.tytex')
  end

  describe 'expanding macros' do
    describe '\simpleScore' do
      it 'full FIAL as argument' do
        write_file 'file.tytex', '\simpleScore{music.ly#id}'
        write_file 'music.ly', <<~'EOS'
        \score {
          \relative c' { a b c }
          \header { id = "id" }
        }
        EOS
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('\lilypondfile{typographus_tmp/file_tytex/music_id.ly}')
        expect('typographus_tmp/file_tytex/music_id.ly').to be_an_existing_file
      end

      it '\setChantSource + only ID as argument' do
        write_file 'file.tytex', '\setChantSource{music.ly} \simpleScore{#id}'
        write_file 'music.ly', <<~'EOS'
        \score {
          \relative c' { a b c }
          \header { id = "id" }
        }
        EOS
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('\lilypondfile{typographus_tmp/file_tytex/music_id.ly}')
        expect('typographus_tmp/file_tytex/music_id.ly').to be_an_existing_file
      end

      it 'relative path is relative to tytex file, regardless \setChantBasedir' do
        write_file 'file.tytex', <<~'EOS'
        \setChantBasedir{/tmp/somedir}
        \simpleScore{./music.ly#id}'
        EOS
        write_file 'music.ly', <<~'EOS'
        \score {
          \relative c' { a b c }
          \header { id = "id" }
        }
        EOS
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('\lilypondfile{typographus_tmp/file_tytex/music_id.ly}')
      end
    end

    describe '\scoreLyrics' do
      it 'inserts score lyrics' do
        write_file 'file.tytex', '\setChantSource{music.ly} \scoreLyrics{#id}'
        write_file 'music.ly', <<~'EOS'
        \score {
          \relative c' { a a }
          \addlyrics { A -- men. }
          \header { id = "id" }
        }
        EOS
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('Amen.')
      end
    end

    describe '\scoreHeader' do
      it 'inserts value of a score header field' do
        write_file 'file.tytex', '\setChantSource{music.ly} \scoreHeader{#id}{header_name}'
        write_file 'music.ly', <<~'EOS'
        \score {
          \relative c' { a a }
          \header {
            id = "id"
            header_name = "desired value"
          }
        }
        EOS
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('desired value')
      end
    end

    describe '\psalm' do
      it 'produces and includes a psalm file' do
        write_file 'file.tytex', '\psalm{Žalm 117}{VIII.G}'
        write_file 'zalm117.zalm', ''
        run_command_and_stop(cmd)

        expect('file.lytex').to have_file_content file_content_including('\input{typographus_tmp/file_tytex/zalm117_00000.tex}')
        expect('typographus_tmp/file_tytex/zalm117_00000.tex').to be_an_existing_file
      end

      describe 'appending doxology' do
        it 'by default none' do
          write_file 'file.tytex', '\psalm{Žalm 117}{VIII.G}'
          write_file 'zalm117.zalm', ''
          run_command_and_stop(cmd)

          # no doxology added (nothing between psalm title and end of psalm)
          expect('typographus_tmp/file_tytex/zalm117_00000.tex')
            .to have_file_content file_content_including("\\titulusPsalmi{}\n\n\n\\end{psalmus}")
        end

        it 'full doxology' do
          write_file 'file.tytex', '\setConfig{config.yml} \psalm{Žalm 117}{VIII.G}'
          write_file 'config.yml', 'typographus: {doxology: full}'

          write_file 'zalm117.zalm', "Psalm title\n\nThe psalm *\nends here."
          write_file 'doxologie.zalm', "Gloria *\nsaeculorum. Amen."

          run_command_and_stop(cmd)

          # content of doxologie.zalm added, separated by a strophe mark
          expect('typographus_tmp/file_tytex/zalm117_00000.tex')
            .to have_file_content file_content_including("ends here.\\psalmStrophe\n\nGloria")
        end

        it 'shortcut' do
          write_file 'file.tytex', '\setConfig{config.yml} \psalm{Žalm 117}{VIII.G}'
          write_file 'config.yml', 'typographus: {doxology: shortcut}'

          write_file 'zalm117.zalm', "Psalm title\n\nThe psalm *\nends here."

          run_command_and_stop(cmd)

          # shortcut added at the end of the psalm
          expect('typographus_tmp/file_tytex/zalm117_00000.tex')
            .to have_file_content file_content_including("ends here.\n\\doxologieZkratka\n\\end{psalmus}")
        end

        it 'full doxology for a selected psalm' do
          write_file 'file.tytex', '\setConfig{config.yml} \psalm{Žalm 117}{VIII.G} \psalm[doxology=full]{Žalm 117}{VIII.G}'
          write_file 'config.yml', 'typographus: {doxology: shortcut}'

          write_file 'zalm117.zalm', "Psalm title\n\nThe psalm *\nends here."
          write_file 'doxologie.zalm', "Gloria *\nsaeculorum. Amen."

          run_command_and_stop(cmd)

          # shortcut added at the end of the first psalm (per global config)
          expect('typographus_tmp/file_tytex/zalm117_00000.tex')
            .to have_file_content file_content_including("ends here.\n\\doxologieZkratka\n\\end{psalmus}")
          # content of doxologie.zalm added to the second psalm
          expect('typographus_tmp/file_tytex/zalm117_00001.tex')
            .to have_file_content file_content_including("ends here.\\psalmStrophe\n\nGloria")
        end
      end

      describe 'psalm tone notation' do
        before :each do
          write_file 'zalm117.zalm', "Psalm title\n\nThe psalm *\nends here."
          write_file 'psalmodie.ly', '\score { \header { id = "VIII-G" } }'
        end

        describe 'globally disabled' do
          before :each do
            # no setup needed, is globally disabled by default
            write_file 'config.yml', '{}'
          end

          it do
            write_file 'file.tytex', '\setConfig{config.yml} \psalm{Žalm 117}{VIII.G}'
            run_command_and_stop(cmd)

            expect('file.lytex').not_to have_file_content file_content_including('\lilypondfile')
          end

          it 'but enabled by an option' do
            write_file 'file.tytex', '\setConfig{config.yml} \psalm[psalm_tone=true]{Žalm 117}{VIII.G}'
            run_command_and_stop(cmd)

            expect('file.lytex')
              .to have_file_content file_content_including('\lilypondfile{typographus_tmp/file_tytex/psalmodie_VIII-G.ly}')
          end
        end

        describe 'globally enabled' do
          before :each do
            write_file 'config.yml', 'typographus: {psalm_tones: true}'
          end

          it do
            write_file 'file.tytex', '\setConfig{config.yml} \psalm{Žalm 117}{VIII.G}'
            run_command_and_stop(cmd)

            expect('file.lytex')
              .to have_file_content file_content_including('\lilypondfile{typographus_tmp/file_tytex/psalmodie_VIII-G.ly}')
          end

          it 'but disabled by an option' do
            write_file 'file.tytex', '\setConfig{config.yml} \psalm[psalm_tone=false]{Žalm 117}{VIII.G}'
            run_command_and_stop(cmd)

            expect('file.lytex').not_to have_file_content file_content_including('\lilypondfile')
          end
        end
      end
    end
  end

  describe 'producing LilyPond files' do
    describe 'including LilyPond library/stylesheet files' do
      before :each do
        write_file 'music.ly', <<~'EOS'
        \score {
          \relative c' { a a }
          \addlyrics { A -- men. }
          \header { id = "id" }
        }
        EOS
      end

      describe 'score' do
        let(:produced_ly_filename) { 'typographus_tmp/file_tytex/music_id.ly' }

        it 'by default does not include any files' do
          write_file 'file.tytex', '\simpleScore{music.ly#id}'
          run_command_and_stop(cmd)

          expect(produced_ly_filename).to be_an_existing_file
          expect(produced_ly_filename)
            .not_to have_file_content file_content_including('\include')
        end

        it 'includes one file specified by \setIncludes' do
          write_file 'file.tytex', '\setIncludes{included.ly} \simpleScore{music.ly#id}'
          run_command_and_stop(cmd)

          # path relative to the tytex file is changed to one relative to the output directory
          expect(produced_ly_filename)
            .to have_file_content file_content_including('\include "../../included.ly"')
        end

        it 'includes multiple files specified by \setIncludes' do
          write_file 'file.tytex', '\setIncludes{included.ly, another.ly} \simpleScore{music.ly#id}'
          run_command_and_stop(cmd)

          expect(produced_ly_filename)
            .to have_file_content file_content_including('\include "../../included.ly"')
          expect(produced_ly_filename)
            .to have_file_content file_content_including('\include "../../another.ly"')
        end

        it 'is not affected by \setPsalmToneIncludes' do
          write_file 'file.tytex', '\setIncludes{included.ly} \setPsalmToneIncludes{for_psalmtones_only.ly} \simpleScore{music.ly#id}'
          run_command_and_stop(cmd)

          expect(produced_ly_filename)
            .to have_file_content file_content_including('\include "../../included.ly"')
          expect(produced_ly_filename)
            .not_to have_file_content file_content_including('for_psalmtones_only.ly')
        end
      end

      describe 'psalm tone' do
        before :each do
          write_file 'psalmodie.ly', <<~'EOS'
          \score {
            \relative c { a a }
            \header { id = "VIII-G" }
          }
          EOS
        end

        let(:produced_ly_filename) { 'typographus_tmp/file_tytex/psalmodie_VIII-G.ly' }

        it 'by default does not include any files' do
          write_file 'file.tytex', '\psalmTone{VIII.G}'
          run_command_and_stop(cmd)

          expect(produced_ly_filename).to be_an_existing_file
          expect(produced_ly_filename)
            .not_to have_file_content file_content_including('\include')
        end

        it 'includes file(s) specified by \setIncludes' do
          write_file 'file.tytex', '\setIncludes{included.ly} \psalmTone{VIII.G}'
          run_command_and_stop(cmd)

          expect(produced_ly_filename)
            .to have_file_content file_content_including('\include "../../included.ly"')
        end

        it '\setPsalmToneIncludes overrides \setIncludes' do
          write_file 'file.tytex', '\setIncludes{included.ly} \setPsalmToneIncludes{for_psalmtones_only.ly} \psalmTone{VIII.G}'
          run_command_and_stop(cmd)

          expect(produced_ly_filename)
            .to have_file_content file_content_including('\include "../../for_psalmtones_only.ly"')
        end
      end
    end
  end

  describe '--score-mode=graphicx' do
    let(:cmd) { "ruby #{typographus} --score-mode=graphicx file.tytex" }

    it 'includes score as png image' do
      write_file 'file.tytex', <<~'EOS'
      \setIncludes{inc.ly}
      \simpleScore{music.ly#id}'
      EOS
      write_file 'inc.ly', 'layoutNoIndent = \layout {}'
      write_file 'music.ly', <<~'EOS'
      \score {
        \relative c' { a b c }
        \header { id = "id" }
      }
      EOS
      run_command_and_stop(cmd)

      expect('file.tex').to have_file_content file_content_including('\includegraphics{typographus_tmp/file_tytex/music_id.png}')
      expect('typographus_tmp/file_tytex/music_id.png').to be_an_existing_file
    end
  end
end
