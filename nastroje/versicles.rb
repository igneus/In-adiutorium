#!/bin/env ruby

# Takes a versicle tone and a YAML file with a bunch of versicle texts
# (pointed and hyphenated as expected by the 'pslm' gem),
# spits out LilyPond notation for each versicle.
# At the time of writing it only handles single-accent versicle tones
# (i.e. no multi-accent or last-syllable ones).

require 'yaml'
require 'pslm'

def build_music(tone)
  tone
    .split(/\s+/)
    .each_with_index
    .collect do |s,i|
    if i == 0
      # reciting
      s + '\breve'
    elsif i == 1
      # first note after the reciting one
      s + '4'
    elsif s =~ /^\{(.+?)\}$/
      # optional note
      "\\parenthesize #{$1}"
    elsif s.end_with? '-'
      # accent
      s.sub '-', '-!'
    elsif s.size > 1
      # melisma
      a = s.split('')
      a[0]+'( ' + a[1..-2].join(' ') + a[-1]+')'
    else
      s
    end
  end
    .join(' ') + ' \barFinalis'
end

def preparatory_syllables_in(tone)
  # the tone is expected to have: 1 accent, 2 post-accent notes, 1 reciting;
  # the rest are preparatory syllables
  tone.split(/\s+/).size - 4
end

def build_lyrics(pslm_line, preparatory_count)
  # cheat PslmReader to parse our line as a psalm verse (lest it refuses to parse it)
  fake_verse = pslm_line + " *\nfake second part"
  parsed = Pslm::PslmReader.new.read_str(fake_verse, false, false).verses.first.first

  syllables = parsed.words.collect(&:syllables).flatten
  after_last_accent = syllables.count - syllables.rindex(&:accent?) - 1

  syllables_seen = 0
  under_breve = ''
  singles = ''
  preparatory_reached = false
  parsed.words.each do |word|
    word.syllables.each_with_index do |syll,i|
      syllables_seen += 1
      preparatory_reached = syllables_seen >= (syllables.count - (preparatory_count + after_last_accent))
      if preparatory_reached
        singles += ' -- ' if i > 0
        singles += ' \skip 1 ' if after_last_accent < 2 && syllables_seen == syllables.count

        singles += syll.gsub(' ', '_')
      else
        under_breve += syll
      end
    end

    if preparatory_reached
      singles += ' '
    else
      under_breve += ' '
    end
  end

  "\"#{under_breve}\" #{singles}"
end

inf = ARGV[0]
tone = ARGV[1]
fw = STDOUT

fw.puts "% generated by versicles.rb from #{inf}\n"
fw.puts "\\version \"2.19.4\"\n"
fw.puts "\\include \"../spolecne.ly\"\n\n"

music = build_music tone
lyricize = proc {|text| build_lyrics(text, preparatory_syllables_in(tone)) }
YAML.load(File.read(inf)).each_pair do |key,content|
  fw.puts "\\score{"
  fw.puts "  \\relative c'' { \\choralniRezim \\neviditelna c #{music} }"
  fw.puts "  \\addlyrics { \\Verse "+lyricize.(content['v'])+" }"
  fw.puts "  \\addlyrics { \\Response "+lyricize.(content['r'])+" }"
  fw.puts "  \\header { id = \"#{key}\" }"
  fw.puts "}"
end
