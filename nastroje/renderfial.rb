# renderfial.rb <FIAL>
# engraves and displays the specified score(s)

require 'fileutils'
require 'open3'

require_relative 'fial.rb'
require_relative 'musicreader.rb'

INCLUDE = %w(spolecne.ly dilyresponsorii.ly).collect do |f|
  # cwd is expected to be the project root directory
  File.expand_path f
end

def run_cmd(command)
  output, status = Open3.capture2e command
  if status != 0
    raise "`#{command}` returned #{status} with output:\n#{output}"
  end
end

def render_fial(fial_str)
  dirname = "/tmp/inadiutorium-renderfial-#{Time.now.to_i}"
  fname = 'score.ly'

  fial = FIAL.parse fial_str
  score = LilyPondMusic.new(fial.path)[fial.id] || raise('score not found')

  Dir.mkdir dirname
  File.open(File.join(dirname, fname), 'w') do |f|
    f.puts "% generated by #{__FILE__}"
    INCLUDE.each {|i| f.puts "\\include \"#{i}\"" }
    f.puts <<~'EOS'
    \header { tagline = ##f }
    #(set-default-paper-size "a5landscape")
    EOS
    f.puts
    f.puts score.text
  end

  Dir.chdir(dirname) do
    format = 'png'
    run_cmd "lilypond --#{format} #{fname}"
    out_fname = fname.sub '.ly', '.' + format

    run_cmd "xdg-open #{out_fname}"
  end
ensure
  FileUtils.rm_r(dirname) if File.exist?(dirname)
end

STDERR.puts 'please specify FIAL' if ARGV.empty?

success = true
ARGV.each do |fial|
  begin
    render_fial fial
  rescue => e
    STDERR.puts "#{fial}: #{e}"
    success = false
  end
end

exit 1 unless success
